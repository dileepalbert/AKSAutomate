Private Cluster
=============================================

Login
=======
$tenantId=""
$subscriptionId=""
$clusterName="arm-wkshpprv-cluster"
$resourceGroup="arm-wkshpprv-rg"
$lwResourceGroup="arm-wkshpprv-rg"
$logworkspaceName="arm-wkshpprv-lw"
$location="eastus"
$masterResourceGroup="master-workshop-rg"
$acrName=""
$keyVaultName="arm-wkshpprv-kv"
$appgwName="arm-wkshpprv-appgw"
$masterVNetName="master-workshop-vnet"
$aksVNetName="arm-wkshpprv-vnet"
$aksSubnetName="arm-wkshpprv-subnet"
$spDisplayName="http://arm-wkshpprv-cluster-sp"
$aadAdminGroupIDs=@("")
$aadTenantID=""
$objectId=""
$baseFolderPath=""
$ingressHostName=""
$listenerHostName=""
$healthProbeHostName=""
$aksPrivateDNSHostName=""
$fwName="master-hub-workshop-fw"
$fwConfigFileName="aksauto-firewall-create"
$fwRouteConfigFileName="aksauto-firewall-route-config"
$pfxCertFileName=""
$aksPrivateDNSHostName=""
$rootCertFileName=""

az login --tenant $tenantId
Connect-AzAccount -TenantId $tenantId

Pre-Config(UDR)
================
./preconfig.ps1 `
-isUdrCluster "true" `
-isPrivateCluster "true" `
-resourceGroup $resourceGroup `
-masterResourceGroup $masterResourceGroup `
-fwResourceGroup $masterResourceGroup `
-location "eastus" `
-clusterName $clusterName `
-acrName $acrName `
-keyVaultName $keyVaultName `
-appgwName $appgwName `
-fwName $fwName `
-masterVNetName $masterVNetName `
-aksVNetName $aksVNetName `
-aksPrivateDNSHostName $aksPrivateDNSHostName `
-fwConfigFileName $fwConfigFileName `
-fwRouteConfigFileName $fwRouteConfigFileName `
-pfxCertFileName $pfxCertFileName `
-spDisplayName $spDisplayName `
-subscriptionId $subscriptionId `
-aadAdminGroupIDs $aadAdminGroupIDs `
-aadTenantID $aadTenantID `
-objectId $objectId `
-baseFolderPath $baseFolderPath

Pre-Config(NON-UDR)
===================
./preconfig.ps1 `
-isUdrCluster "false" `
-isPrivateCluster "true" `
-resourceGroup $resourceGroup `
-masterResourceGroup $masterResourceGroup `
-location "eastus" `
-clusterName $clusterName `
-acrName $acrName `
-keyVaultName $keyVaultName `
-appgwName $appgwName `
-masterVNetName $masterVNetName `
-aksVNetName $aksVNetName `
-aksPrivateDNSHostName $aksPrivateDNSHostName `
-pfxCertFileName $pfxCertFileName `
-spDisplayName $spDisplayName `
-subscriptionId $subscriptionId `
-aadAdminGroupIDs $aadAdminGroupIDs `
-aadTenantID $aadTenantID `
-objectId $objectId `
-baseFolderPath $baseFolderPath

Setup
==========
./aksauto-cluster-setup.ps1 `
-isUdrCluster "false" `
-isPrivateCluster "true" `
-resourceGroup $resourceGroup `
-masterResourceGroup $masterResourceGroup `
-lwResourceGroup $lwResourceGroup `
-location $location `
-clusterName $clusterName `
-acrName "akswkshpprvacr" `
-keyVaultName "aks-wkshpprv-kv" `
-logworkspaceName "aks-wkshpprv-lw" `
-aksVNetName "aks-wkshpprv-vnet" `
-aksSubnetName "aks-wkshpprv-subnet" `
-version "1.19.13" -addons "monitoring" `
-nodeCount 3 -maxPods 40 `
-vmSetType "VirtualMachineScaleSets" `
-nodeVMSize "Standard_DS2_v2" `
-aksServicePrefix "26.0.6.0/24" `
-aksDNSServiceIP "26.0.6.10" `
-networkPlugin "azure" `
-networkPolicy "azure" `
-nodePoolName "akssyspool" `
-aadAdminGroupIDs $aadAdminGroupIDs `
-aadTenantID $aadTenantID

Virtual Node
=============
./setup.ps1 `
-resourceGroup $resourceGroup `
-clusterName $clusterName `
-keyVaultName "aks-wkshpprv-kv" `
-vrnSubnetName "vrn-workshop-subnet"

Scale system Nodepool
=======================
./nodepool.ps1 `
-nodePoolName "akssyspool" `
-resourceGroup $resourceGroup `
-clusterName $clusterName `
-minNodeCount 3 `
-maxNodeCount 20

Create Nodepool
===============
./nodepool.ps1 `
-nodePoolName "aksapipool" `
-resourceGroup $resourceGroup `
-clusterName $clusterName `
-version "1.19.13" `
-nodeCount 3 `
-minNodeCount $nodeCount `
-maxNodeCount 20 `
-maxPods 40 `
-nodePoolVMSize "Standard_DS2_V2" `
-osType "Linux" `
-nodepoolMode "User"

Scale API Nodepool
===================
./nodepool.ps1 `
-nodePoolName "aksapipool" `
-resourceGroup $resourceGroup `
-clusterName $clusterName `
-minNodeCount 3 `
-maxNodeCount 20

Post-Config(UDR)
================
./postconfig.ps1 `
-isUdrCluster "true" `
-resourceGroup $resourceGroup `
-masterResourceGroup $masterResourceGroup `
-fwResourceGroup $masterResourceGroup `
-fwName $fwName `
-location $location `
-namespaces @("arm-wkshpprv-dev", "arm-wkshpprv-qa", "smoke") `
-clusterName $clusterName `
-acrName $acrName `
-keyVaultName $keyVaultName `
-masterVNetName $masterVNetName `
-aksVNetName $aksVNetName `
-ingressSubnetName $ingressSubnetName `
-ingressNodePoolName $ingressNodePoolName `
-appgwName $appgwName `
-appgwSubnetName $appgwSubnetName `
-appgwTemplateFileName $appgwTemplateFileName `
-appgwConfigFileName $appgwConfigFileName `
-ingressControllerIPAddress "26.0.5.100" `
-subscriptionId $subscriptionId `
-baseFolderPath $baseFolderPath

Post-Config(Non-UDR)
====================
./postconfig.ps1 `
-isUdrCluster "true" `
-resourceGroup $resourceGroup `
-masterResourceGroup $masterResourceGroup `
-location $location `
-namespaces @("arm-wkshpprv-dev", "arm-wkshpprv-qa", "smoke") `
-clusterName $clusterName `
-acrName $acrName `
-keyVaultName $keyVaultName `
-masterVNetName $masterVNetName `
-aksVNetName $aksVNetName `
-ingressSubnetName $ingressSubnetName `
-ingressNodePoolName $ingressNodePoolName `
-appgwName $appgwName `
-appgwSubnetName $appgwSubnetName `
-appgwTemplateFileName $appgwTemplateFileName `
-appgwConfigFileName $appgwConfigFileName ` `
-ingressControllerIPAddress "26.0.5.100" `
-subscriptionId $subscriptionId `
-baseFolderPath $baseFolderPath


Remove(UDR)
============
./remove.ps1 `
-resourceGroup $resourceGroup `
-lwResourceGroup $lwResourceGroup `
-masterResourceGroup $masterResourceGroup `
-fwResourceGroup $masterResourceGroup `
-clusterName $clusterName `
-acrName $acrName `
-keyVaultName $keyVaultName `
-appGwName $appGwName `
-fwName $fwName `
-httpsListeners $httpsListeners `
-logworkspaceName $logworkspaceName `
-masterVNetName $masterVNetName `
-aksVNetName $aksVNetName `
-ingressHostName $ingressHostName `
-subscriptionId $subscriptionId

Remove(Non-UDR)
===============
./remove.ps1 `
-resourceGroup $resourceGroup `
-lwResourceGroup $lwResourceGroup `
-masterResourceGroup $masterResourceGroup `
-clusterName $clusterName `
-acrName $acrName `
-keyVaultName $keyVaultName `
-appGwName $appGwName `
-httpsListeners $httpsListeners `
-logworkspaceName $logworkspaceName `
-masterVNetName $masterVNetName `
-aksVNetName $aksVNetName `
-ingressHostName $ingressHostName `
-subscriptionId $subscriptionId

Connect to Private Cluster
===========================
az aks get-credentials -g $resourceGroup -n $clusterName
az aks enable-addons --addons azure-policy -n $clusterName -g $resourceGroup
az aks show --query addonProfiles.azurepolicy -n $clusterName -g $resourceGroup

kubectl config set-context --current --namespace=aks-workshop-dev
kubectl config set-context --current --namespace=aks-workshop-qa
kubectl config set-context --current --namespace=smoke

==================================================================================================================


Helms
=====
RBAC
=====
helm create rbac-chart

helm install rbac-chart -n aks-workshop-dev ./rbac-chart/ -f ./rbac-chart/values-dev.yaml
helm upgrade rbac-chart -n aks-workshop-dev ./rbac-chart/ -f ./rbac-chart/values-dev.yaml

helm install rbac-chart -n aks-workshop-qa ./rbac-chart/ -f ./rbac-chart/values-qa.yaml
helm upgrade rbac-chart -n aks-workshop-qa ./rbac-chart/ -f ./rbac-chart/values-qa.yaml

helm install rbac-chart -n smoke ./rbac-chart/ -f ./rbac-chart/values-smoke.yaml
helm upgrade rbac-chart -n smoke ./rbac-chart/ -f ./rbac-chart/values-smoke.yaml

helm uninstall rbac-chart

INGRESS
=====

k create secret tls aks-workshop-tls-secret -n aks-workshop-dev --cert="star_internal_wkshpdev_com.pem" --key="star.internal.wkshpdev.com.key"
helm create ingress-chart

helm install  ingress-chart -n aks-workshop-dev ./ingress-chart/ -f ./ingress-chart/values-dev-tls.yaml
helm upgrade  ingress-chart -n aks-workshop-dev ./ingress-chart/ -f ./ingress-chart/values-dev-tls.yaml

k create secret tls aks-workshop-tls-secret -n aks-workshop-qa --cert="star_internal_wkshpdev_com.pem" --key="star.internal.wkshpdev.com.key"
helm install  ingress-chart -n aks-workshop-qa ./ingress-chart/ -f ./ingress-chart/values-qa-tls.yaml
helm upgrade  ingress-chart -n aks-workshop-qa ./ingress-chart/ -f ./ingress-chart/values-qa-tls.yaml

k create secret tls aks-workshop-tls-secret -n ssltest --cert="star_internal_wkshpdev_com.pem" --key="star.internal.wkshpdev.com.key"
helm install  ingress-chart -n ssltest ./ingress-chart/ -f ./ingress-chart/values-ssltest.yaml
helm upgrade  ingress-chart -n ssltest ./ingress-chart/ -f ./ingress-chart/values-ssltest.yaml

helm uninstall ingress-chart

k create secret tls aks-workshop-tls-secret -n smoke --cert="star_internal_wkshpdev_com.pem" --key="star.internal.wkshpdev.com.key"
helm create smoke-ingress-chart
helm install  smoke-ingress-chart -n smoke ./ingress-chart/ -f ./ingress-chart/values-smoke-tls.yaml
helm upgrade  smoke-ingress-chart -n smoke ./ingress-chart/ -f ./ingress-chart/values-smoke-tls.yaml
helm uninstall smoke-ingress-chart

TESTS
======
kubectl get constrainttemplates
kubectl get po -n kube-system | grep azure-policy
kubectl get po -n gatekeeper-system

az acr import -n akswkshpprvacr --source docker.io/library/nginx:alpine -t nginx:alpine (Private)

helm create smoke-tests-chart
helm install smoke-tests-chart -n smoke ./smoke-tests-chart/ --set deployment.containers[0].image=akswkshpprvacr.azurecr.io/nginx:alpine -f ./smoke-tests-chart/values-smoke.yaml
helm upgrade smoke-tests-chart -n smoke ./smoke-tests-chart/ --set deployment.containers[0].image=akswkshpprvacr.azurecr.io/nginx:alpine -f ./smoke-tests-chart/values-smoke.yaml
helm uninstall smoke-tests-chart

APIM gateway
=============

kubectl create secret generic aks-workshop-gateway-token -n apim --from-literal=value="GatewayKey aks-workshop-gateway&202201020813&nqT6PSUL0Jv8S6eCwATIcqM2N/G7ZL6xoYKeXx771JmRGc789ePbgGJGviazFAHk0cDfFnkN7xy+18QPcjnnGA=="  --type=Opaque
kubectl apply -f aks-workshop-apim-gateway.yaml -n apim
kubectl apply -f apim-ingress.yaml -n apim

kubectl delete secrets/aks-workshop-gateway-token -n apim
kubectl delete -f apim-ingress.yaml -n apim
kubectl delete -f aks-workshop-apim-gateway.yaml -n apim


190f0a63-3460-4f1a-ba65-14adba3adb04
9ebedfa6-518c-4e7a-b2cf-dcaa056d2cfc
3851f269-b22b-4de6-97d6-aa9fe60fe301
api://190f0a63-3460-4f1a-ba65-14adba3adb04

b9cfc0ea-37f3-4314-86cd-fda8f6eff4df
86d4be8c-5cf0-484b-bdea-9e5c365f631e
3851f269-b22b-4de6-97d6-aa9fe60fe301
aksclientappsecret: zbFsv9.PNN-HjL-qu-qMz~p3f6AP.V7I9z

https://hybrid-workshop-apim.developer.azure-api.net/signin-oauth/code/callback/aksapioauth2
https://hybrid-workshop-apim.developer.azure-api.net/signin-oauth/implicit/callback

<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url="https://login.microsoftonline.com/3851f269-b22b-4de6-97d6-aa9fe60fe301/.well-known/openid-configuration" />
    <required-claims>
        <claim name="aud">
            <value>190f0a63-3460-4f1a-ba65-14adba3adb04</value>
        </claim>
    </required-claims>
</validate-jwt>

Linkerd
=======

brew install step

step certificate create root.linkerd.cluster.local root.crt root.key \
  --profile root-ca --no-password --insecure

step certificate create identity.linkerd.cluster.local issuer.crt issuer.key \
  --profile intermediate-ca --not-after 8760h --no-password --insecure \
  --ca root.crt --ca-key root.key

curl -sL https://run.linkerd.io/install | sh
linkerd check --pre

linkerd install | kubectl apply -f -
OR
linkerd install \
  --identity-trust-anchors-file root.crt \
  --identity-issuer-certificate-file issuer.crt \
  --identity-issuer-key-file issuer.key \
  | tee \
    >(kubectl --context=aks-workshop-cluster apply -f -)

linkerd check
linkerd version
k get deploy nginx-deploy -n smoke -o yaml | linkerd inject - | k apply -f -
k get deploy nginx-deploy -n smoke -o yaml | linkerd uninject - | k apply -f -


linkerd uninstall | kubectl delete -f -

helm repo add linkerd https://helm.linkerd.io/stable
exp=$(date -v+8760H +"%Y-%m-%dT%H:%M:%SZ")

helm install linkerd2 \
  --set-file identityTrustAnchorsPEM=root.crt \
  --set-file identity.issuer.tls.crtPEM=issuer.crt \
  --set-file identity.issuer.tls.keyPEM=issuer.key \
  --set identity.issuer.crtExpiry=$exp \
  linkerd/linkerd2